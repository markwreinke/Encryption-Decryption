type: edu
custom_name: stage2
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.List;


    class Attach {
        String original;
        int shift;
        String output;

        public Attach(String original, int shift, String output) {
            this.original = original;
            this.shift = shift;
            this.output = output;
        }
    }

    public class EncryptDecryptTest extends BaseStageTest<Attach> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("welcome to hyperskill\n5")
                    .setAttach(new Attach(
                        "welcome to hyperskill",
                        5,
                        "bjqhtrj yt mdujwxpnqq")),

                new TestCase<Attach>()
                    .setInput("treasure\n10")
                    .setAttach(new Attach(
                        "treasure",
                        10,
                        "dbokcebo"
                    )),

                new TestCase<Attach>()
                    .setInput("qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid\n12")
                    .setAttach(new Attach(
                        "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid",
                        12,
                        "cphpchdjcijdjibhdjebhjucspucmdmudbnuccup"
                    )),

                new TestCase<Attach>()
                    .setInput("y\n10")
                    .setAttach(new Attach(
                        "y",
                        10,
                        "i"
                    ))
            );
        }

        @Override
        public CheckResult check(String reply, Attach attach) {
            String clue = attach.output;
            reply = reply.trim();
            clue = clue.trim();
            boolean isCorrect = reply.equals(clue);
            if (isCorrect) {
                return CheckResult.TRUE;
            }
            if (reply.length() != clue.length()) {
                return CheckResult.FALSE(
                    "You should output a line with length " +
                        clue.length() + ". " + "You output a " +
                        "line with length " + reply.length()
                );
            }
            for (int i = 0; i < clue.length(); i++) {
                if (reply.charAt(i) != clue.charAt(i)) {
                    return CheckResult.FALSE(
                        "Your " + (i+1) + "-th character '" + reply.charAt(i) + "'" +
                            " is incorrect. \n" +
                        "The right one is '" + clue.charAt(i) + "'. \n" +
                            "Key is " + attach.shift
                    );
                }
            }
            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |-
    package encryptdecrypt;

    import java.io.FileNotFoundException;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.Scanner;
    import java.io.File;

    public class Main {
        public static void main(String[] args) {
            String op = "enc";
            int key = 0;
            String input = "";
            File readInFile = null;
            File writeOutFile = null;

            for (int i = 0; i < args.length; i++) {
                switch (args[i]) {
                    case "-mode":
                        i++;
                        op = args[i];
                        break;
                    case "-key":
                        i++;
                        key = Integer.parseInt(args[i]);
                        break;
                    case "-data":
                        i++;
                        input = args[i];
                        break;
                    case "-in":
                        i++;
                        String inFilePath = args[i];
                        readInFile = new File(inFilePath);
                        break;
                    case "-out":
                        i++;
                        String outFilePath = args[i];
                        writeOutFile = new File(outFilePath);
                        break;
                }
            }

            /*System.out.println(op);
            System.out.println(key);
            System.out.println(input);
            System.out.println(readInFile);
            System.out.println(writeOutFile);*/

            char[] outputChars = {};

            if (readInFile != null && !input.isEmpty()) {
                if (op.equals("dec")) {
                    outputChars = dec(input, key);
                } else {
                    outputChars = enc(input, key);
                }
            } else if (readInFile != null) {
                try (Scanner scanner = new Scanner(readInFile)) {
                    input = scanner.nextLine();
                    if (op.equals("dec")) {
                        outputChars = dec(input, key);
                    } else {
                        outputChars = enc(input, key);
                    }
                } catch (FileNotFoundException e){
                    System.out.println("Error! No file found: " + readInFile.getPath());
                }
            } else{
                if (op.equals("dec")) {
                    outputChars = dec(input, key);
                } else {
                    outputChars = enc(input, key);
                }
            }

            if(writeOutFile != null){
                try(FileWriter writer = new FileWriter(writeOutFile)) {
                    writer.write(outputChars);
                }catch (IOException e) {
                    System.out.print(outputChars);
                }
            } else{
                System.out.print(outputChars);
            }
        }

        public static char[] enc(String input, int key){
            char[] inputChars = input.toCharArray();

            for(int i = 0; i < input.length(); i++){
                if(inputChars[i] > 31 && inputChars[i] < 127){
                    int temp = (int)inputChars[i] - 32;
                    temp += key;
                    temp = temp % 95;
                    inputChars[i] = (char)(temp + 32);
                }
            }

            return inputChars;
        }

        public static char[] dec(String input, int key){
            char[] inputChars = input.toCharArray();

            for(int i = 0; i < input.length(); i++){
                if(inputChars[i] > 31 && inputChars[i] < 127){
                    int temp = (int)inputChars[i] - 32;
                    temp -= key;
                    temp = temp % 95;
                    inputChars[i] = (char)(temp + 32);
                }
            }


            return inputChars;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/246/implement
status: Solved
record: 3
